The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------

First import ``BaseGeometry`` from the ``7-base_geometry`` module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

    Create instance:
    >>> bg = BaseGeometry()

    Normal Use:
    >>> bg.integer_validator("my_int", 12)

    No arguments passed:
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    Only one argument passed:
    >>> bg.integer_validator("name")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    'value' is equal to or less than 0:
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

    'value' is a string:
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

    'value' is a tuple:
    >>> bg.integer_validator("name", (4,))
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

    'value' is a list:
    >>> bg.integer_validator("name", [3])
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

    'value' is True:
    >>> bg.integer_validator("name", True)
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

    'value' is a set:
    >>> bg.integer_validator("name", {3, 4})
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

    'value' is None:
    >>> bg.integer_validator("name", None)
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

    get area:
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented
